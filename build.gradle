/*
 * This file was generated by the Gradle 'init' task.
 *
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    id 'java-library'
    id 'maven-publish'
    id 'java'
    id 'pmd'
    id 'checkstyle'
    id 'com.github.spotbugs' version '4.7.0' // Note the version number may change
}


repositories {
    mavenLocal()
    maven {
        url = uri('https://repo.maven.apache.org/maven2/')
    }
}

group = 'com.example'
version = '1.0-SNAPSHOT'
description = 'my-project'
java.sourceCompatibility = JavaVersion.VERSION_1_8

publishing {
    publications {
        maven(MavenPublication) {
            from(components.java)
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks.withType(Javadoc) {
    options.encoding = 'UTF-8'
}

pmdMain {
    reports {
        xml.enabled = true
        xml.destination = file("$buildDir/reports/pmd/main.xml")
    }
}

// PMD configuration
pmd {
    toolVersion = '6.38.0'  // You can specify the version of PMD you want to use
    ruleSets = ["category/java/bestpractices.xml", "category/java/codestyle.xml", "java-basic", "java-design"]
    ignoreFailures = true
    sourceSets = [sourceSets.main]  // This will apply PMD only to the main source set.
    reports {
        xml.destination = file("build/reports/pmd/pmd.xml")
        xml.enabled = true  // Enables XML report (for CI tools like Jenkins)
        html.enabled = true // Enables HTML report
    }
}


task spotbugsMain(type: SpotBugsTask) {
    classes = fileTree('build/classes/main') // Define the class files you want to check
    source = fileTree('src/main/java').include('**/*.java') // Define the source files you want to check
    classpath = files() // Define the classpath
    // ... other configurations
}

// SpotBugs configuration
spotbugs {
    toolVersion = '4.2.3'  // You can specify the version of SpotBugs you want to use
    effort = 'max'
    reportLevel = 'low'
    ignoreFailures = true
    reports {
        xml.enabled = true  // Enables XML report (for CI tools like Jenkins)
        html.enabled = true // Enables HTML report
    }
}

task customPmd(type: Pmd) {
    
    source = fileTree('src/main/java').include('**/*.java')  // Define the Java files you want to check
    rulePriority = 5
    ruleSets = []
    ignoreFailures = true
    doLast {
        println "PMD has checked the following files: ${source.files}"
    }
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

check.dependsOn customPmd
check.dependsOn spotbugsMain

